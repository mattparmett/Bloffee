// Generated by CoffeeScript 1.3.3

/*
Bloffee
A little static-file blog engine written in CoffeeScript.
Powered by Node.js, Express, Jade, and Markdown.
Written by Matt Parmett (mattparmett.com)
*/


(function() {
  var MetaReader, PostReader, app, express, fs, metadata, showdown;

  express = require('express');

  fs = require('fs');

  showdown = require('showdown');

  app = express();

  app.use(express["static"](process.cwd() + '/public'));

  app.set('view engine', 'jade');

  app.locals({
    md: function(text){ md_converter = new showdown.converter();
  return md_converter.makeHtml(text);}
  });

  PostReader = function(fn, fs) {
    var body, d, date, line, path, published, title, _i, _len, _ref;
    title = "";
    body = "";
    date = "";
    published = true;
    _ref = fs.readFileSync(fn).toString().split('\n');
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      line = _ref[_i];
      if (line.indexOf("Title: ") !== -1) {
        title = line.replace("Title: ", "");
      } else if (line.indexOf("Date: ") !== -1) {
        d = line.replace("Date: ", "").split("-");
        date = new Date(d);
      } else if (line.indexOf("Published: ") !== -1) {
        if (line.replace("Published: ", "") === "false") {
          published = false;
        } else {
          published = true;
        }
      } else {
        if (line.indexOf("---") !== 0) {
          body = body + "\n" + line;
        }
      }
    }
    path = fn.replace("posts", "post").replace(".md", "").split(" ").join("-");
    return {
      title: title,
      body: body,
      date: date,
      published: published,
      fn: path
    };
  };

  MetaReader = function(fn, fs) {
    var p;
    if (fs.existsSync(fn)) {
      p = PostReader(fn, fs);
      return {
        title: p.title,
        description: p.body
      };
    } else {
      return {
        title: "Bloffee",
        description: "A little static-file blog engine written in CoffeeScript."
      };
    }
  };

  metadata = MetaReader('blog.md', fs);

  global.blog_title = metadata.title;

  global.blog_desc = metadata.description;

  app.get('/', function(req, resp) {
    return resp.redirect('/1');
  });

  app.get('/post/:post_title', function(req, resp) {
    var fn, post;
    fn = process.cwd() + '/posts/' + req.params.post_title.split("-").join(" ") + ".md";
    post = PostReader(fn, fs);
    if (post.published === true) {
      return resp.render('post', {
        title: post.title,
        body: post.body,
        date: post.date,
        published: post.published,
        fn: '/post/' + req.params.post_title,
        page: this.page,
        blog_title: blog_title,
        blog_desc: blog_desc
      });
    } else {
      return resp.redirect("/" + this.page);
    }
  });

  app.get('/:page', function(req, resp) {
    var post, post_files, posts, posts_per_page, start_post, total_pages;
    this.page = parseInt(req.params.page);
    if (this.page <= 0) {
      resp.redirect('/');
    }
    posts_per_page = 5;
    post_files = fs.readdirSync('posts');
    posts = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = post_files.length; _i < _len; _i++) {
        post = post_files[_i];
        if (post.indexOf(".md") !== -1) {
          _results.push(PostReader('posts/' + post, fs));
        }
      }
      return _results;
    })();
    posts = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = posts.length; _i < _len; _i++) {
        post = posts[_i];
        if (post.published !== false) {
          _results.push(post);
        }
      }
      return _results;
    })();
    total_pages = Math.ceil(posts.length / posts_per_page);
    posts.sort(function(a, b) {
      if (a.date < b.date) {
        return 1;
      } else {
        return -1;
      }
    });
    start_post = (this.page - 1) * posts_per_page;
    if (start_post >= posts.length) {
      resp.redirect("/" + (posts.length / posts_per_page));
    }
    posts = posts.slice(start_post, start_post + posts_per_page);
    return resp.render('postlist', {
      posts: posts,
      page: this.page,
      total_pages: total_pages,
      blog_title: blog_title,
      blog_desc: blog_desc
    });
  });

  app.listen(process.env.PORT || 3000);

}).call(this);
